-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Tiny.

module AbsTiny where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = Program [Decl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl
    = MainDef Stmt
    | FnDef Type Ident [Arg] Stmt
    | VarDef Type Ident Exp
    | ArrDef Type Ident [Exp]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = VarArg Type Ident | RefArg Type Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stmt
    = Block Stmt
    | Then Stmt Stmt
    | Skip
    | VarDecl Type Ident Exp
    | ArrDecl Type Ident [Exp]
    | PrintInt Exp
    | PrintStr Exp
    | PrintBool Exp
    | Ass Ident Exp
    | ArrAss Ident [Exp]
    | Ret Exp
    | If Exp Stmt Stmt
    | While Exp Stmt
    | Break
    | Continue
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = IntType | StrType | BoolType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = EVar Ident
    | EArr Ident Exp
    | ERef Ident
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp Ident [Exp]
    | EString String
    | Neg Exp
    | Not Exp
    | EMul Exp MulOp Exp
    | EAdd Exp AddOp Exp
    | ERel Exp RelOp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AddOp = Plus | Minus
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MulOp = Times | Div | Mod
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

